##############################
#   		   a			 #
##############################

Again:


		/*
		Before doing the actual implementation, I have to tell - as stated somewhere in my sourcecode
		for the "searchTitle" method - I have really fully thought about what the Task wants me to do
		with this index. But I couldn't think of a single useful implementation for using a index.

		First, logically thought about the usage of our implementation: why would
		someone want to use for example the index "214" over "Yellow Submarine" to find his favourite song?

		Second, I could see the technical advantages over a string, but when we would read the songs
		for example from the filesystem, we really have no clue in which order we will get them? How
		can we guarantee the indizes being correct after restarting the program?

		I'm sorry I didn't implement a search-Method using the index, but considering the aspects above
		and some minor aspects furthermore (like, why make the interface to our musiclibrary more complex)
		I think it's okay to not have the second search-method. At least, I did make spend some time
		making myself some thoughts about it.
		*/
		

But okay, what are the differences between using a index and a "string-key" in general?

As mentioned above, a big advantage for the string-key over the index regarding the song-titles is mainly
that you can simply search for the song-title by name. I really couldn't think of a usage for an index
because if you just iterator over the titles, use a iterator (hence the name "iterator").

Generally spoken, an index should be as short as possible and numbers are usually easier to handle, sort, etc.
On the other hand, strings are sometimes more usable by the developer and user.
Also, a numeric index can change - depending on the way of our implementation, but the title name will always stay the same
So, I think the difference might be:
Performance (Index) vs. Usability (No Index)

##############################
#   		   b			 #
##############################

